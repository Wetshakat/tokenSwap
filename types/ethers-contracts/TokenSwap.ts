/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface TokenSwapInterface extends Interface {
    getFunction(nameOrSignature: "OurBalanceBLT" | "OurBalanceSLT" | "addLiquidityTokenA" | "addLiquidityTokenB" | "rate" | "swapAToB" | "swapBToA" | "tokenA" | "tokenASymbol" | "tokenB" | "tokenBSymbol"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "swapped"): EventFragment;

    encodeFunctionData(functionFragment: 'OurBalanceBLT', values?: undefined): string;
encodeFunctionData(functionFragment: 'OurBalanceSLT', values?: undefined): string;
encodeFunctionData(functionFragment: 'addLiquidityTokenA', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'addLiquidityTokenB', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'rate', values?: undefined): string;
encodeFunctionData(functionFragment: 'swapAToB', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'swapBToA', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'tokenA', values?: undefined): string;
encodeFunctionData(functionFragment: 'tokenASymbol', values?: undefined): string;
encodeFunctionData(functionFragment: 'tokenB', values?: undefined): string;
encodeFunctionData(functionFragment: 'tokenBSymbol', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'OurBalanceBLT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'OurBalanceSLT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'addLiquidityTokenA', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'addLiquidityTokenB', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'swapAToB', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'swapBToA', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tokenA', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tokenASymbol', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tokenB', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tokenBSymbol', data: BytesLike): Result;
  }

  
    export namespace swappedEvent {
      export type InputTuple = [owner: AddressLike, tokenASymbol: string, tokkenAamount: BigNumberish, tokenBSymbol: string, tokkenBamount: BigNumberish];
      export type OutputTuple = [owner: string, tokenASymbol: string, tokkenAamount: bigint, tokenBSymbol: string, tokkenBamount: bigint];
      export interface OutputObject {owner: string, tokenASymbol: string, tokkenAamount: bigint, tokenBSymbol: string, tokkenBamount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface TokenSwap extends BaseContract {
    
    connect(runner?: ContractRunner | null): TokenSwap;
    waitForDeployment(): Promise<this>;

    interface: TokenSwapInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    OurBalanceBLT: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    OurBalanceSLT: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    addLiquidityTokenA: TypedContractMethod<
      [_amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    addLiquidityTokenB: TypedContractMethod<
      [_amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    rate: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    swapAToB: TypedContractMethod<
      [_amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    swapBToA: TypedContractMethod<
      [_amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    tokenA: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    tokenASymbol: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    tokenB: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    tokenBSymbol: TypedContractMethod<
      [],
      [string],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'OurBalanceBLT'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'OurBalanceSLT'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'addLiquidityTokenA'): TypedContractMethod<
      [_amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'addLiquidityTokenB'): TypedContractMethod<
      [_amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'rate'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'swapAToB'): TypedContractMethod<
      [_amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'swapBToA'): TypedContractMethod<
      [_amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'tokenA'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'tokenASymbol'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'tokenB'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'tokenBSymbol'): TypedContractMethod<
      [],
      [string],
      'view'
    >;

    getEvent(key: 'swapped'): TypedContractEvent<swappedEvent.InputTuple, swappedEvent.OutputTuple, swappedEvent.OutputObject>;

    filters: {
      
      'swapped(address,string,uint256,string,uint256)': TypedContractEvent<swappedEvent.InputTuple, swappedEvent.OutputTuple, swappedEvent.OutputObject>;
      swapped: TypedContractEvent<swappedEvent.InputTuple, swappedEvent.OutputTuple, swappedEvent.OutputObject>;
    
    };
  }