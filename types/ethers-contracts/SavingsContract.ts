/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface SavingsContractInterface extends Interface {
    getFunction(nameOrSignature: "deposit" | "save" | "savingBalance" | "token" | "totalDeposits" | "withdraw"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Deposited" | "Withdrawn"): EventFragment;

    encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'save', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'savingBalance', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'token', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalDeposits', values?: undefined): string;
encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'save', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'savingBalance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalDeposits', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  }

  
    export namespace DepositedEvent {
      export type InputTuple = [user: AddressLike, amount: BigNumberish];
      export type OutputTuple = [user: string, amount: bigint];
      export interface OutputObject {user: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace WithdrawnEvent {
      export type InputTuple = [user: AddressLike, amount: BigNumberish];
      export type OutputTuple = [user: string, amount: bigint];
      export interface OutputObject {user: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface SavingsContract extends BaseContract {
    
    connect(runner?: ContractRunner | null): SavingsContract;
    waitForDeployment(): Promise<this>;

    interface: SavingsContractInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    deposit: TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    save: TypedContractMethod<
      [user: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    savingBalance: TypedContractMethod<
      [user: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    token: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    totalDeposits: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    withdraw: TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'deposit'): TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'save'): TypedContractMethod<
      [user: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'savingBalance'): TypedContractMethod<
      [user: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'token'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'totalDeposits'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'withdraw'): TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'Deposited'): TypedContractEvent<DepositedEvent.InputTuple, DepositedEvent.OutputTuple, DepositedEvent.OutputObject>;
getEvent(key: 'Withdrawn'): TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;

    filters: {
      
      'Deposited(address,uint256)': TypedContractEvent<DepositedEvent.InputTuple, DepositedEvent.OutputTuple, DepositedEvent.OutputObject>;
      Deposited: TypedContractEvent<DepositedEvent.InputTuple, DepositedEvent.OutputTuple, DepositedEvent.OutputObject>;
    

      'Withdrawn(address,uint256)': TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;
      Withdrawn: TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;
    
    };
  }