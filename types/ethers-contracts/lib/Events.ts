/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, FunctionFragment, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener } from "../common.js"
  

  export interface EventsInterface extends Interface {
    

    getEvent(nameOrSignatureOrTopic: "Approve" | "Transfer" | "TransferFrom" | "swapped"): EventFragment;

    

    
  }

  
    export namespace ApproveEvent {
      export type InputTuple = [owner: AddressLike, spender: AddressLike, amount: BigNumberish];
      export type OutputTuple = [owner: string, spender: string, amount: bigint];
      export interface OutputObject {owner: string, spender: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferEvent {
      export type InputTuple = [sender: AddressLike, reciepient: AddressLike, amount: BigNumberish];
      export type OutputTuple = [sender: string, reciepient: string, amount: bigint];
      export interface OutputObject {sender: string, reciepient: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferFromEvent {
      export type InputTuple = [owner: AddressLike, spender: AddressLike, amount: BigNumberish];
      export type OutputTuple = [owner: string, spender: string, amount: bigint];
      export interface OutputObject {owner: string, spender: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace swappedEvent {
      export type InputTuple = [owner: AddressLike, tokenASymbol: string, tokkenAamount: BigNumberish, tokenBSymbol: string, tokkenBamount: BigNumberish];
      export type OutputTuple = [owner: string, tokenASymbol: string, tokkenAamount: bigint, tokenBSymbol: string, tokkenBamount: bigint];
      export interface OutputObject {owner: string, tokenASymbol: string, tokkenAamount: bigint, tokenBSymbol: string, tokkenBamount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Events extends BaseContract {
    
    connect(runner?: ContractRunner | null): Events;
    waitForDeployment(): Promise<this>;

    interface: EventsInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    

    getEvent(key: 'Approve'): TypedContractEvent<ApproveEvent.InputTuple, ApproveEvent.OutputTuple, ApproveEvent.OutputObject>;
getEvent(key: 'Transfer'): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
getEvent(key: 'TransferFrom'): TypedContractEvent<TransferFromEvent.InputTuple, TransferFromEvent.OutputTuple, TransferFromEvent.OutputObject>;
getEvent(key: 'swapped'): TypedContractEvent<swappedEvent.InputTuple, swappedEvent.OutputTuple, swappedEvent.OutputObject>;

    filters: {
      
      'Approve(address,address,uint256)': TypedContractEvent<ApproveEvent.InputTuple, ApproveEvent.OutputTuple, ApproveEvent.OutputObject>;
      Approve: TypedContractEvent<ApproveEvent.InputTuple, ApproveEvent.OutputTuple, ApproveEvent.OutputObject>;
    

      'Transfer(address,address,uint256)': TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
      Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    

      'TransferFrom(address,address,uint256)': TypedContractEvent<TransferFromEvent.InputTuple, TransferFromEvent.OutputTuple, TransferFromEvent.OutputObject>;
      TransferFrom: TypedContractEvent<TransferFromEvent.InputTuple, TransferFromEvent.OutputTuple, TransferFromEvent.OutputObject>;
    

      'swapped(address,string,uint256,string,uint256)': TypedContractEvent<swappedEvent.InputTuple, swappedEvent.OutputTuple, swappedEvent.OutputObject>;
      swapped: TypedContractEvent<swappedEvent.InputTuple, swappedEvent.OutputTuple, swappedEvent.OutputObject>;
    
    };
  }